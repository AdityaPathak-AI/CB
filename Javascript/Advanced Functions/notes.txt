#[Arrow Function ==>]
1.Arrow function ==> is the one of the feature introduced in ECMAscript 6.
2.It allows you to create a function in a cleaner way compare to regular functions.

1.  ()=> expression

2.  (parameter, parametern) => expression

3.  ()=>
        {
            statement
        }

const greet=()=>
{
    console.log("welcome my fraaands");
}
greet();

const greet=(count)=>
{
    for(let i=0 ; i<count ;i++)
    console.log("welcome my fraaands");
}
greet(5);


const si=(p,r,t)=>
{
    let a = p*r*t;
    return a;
    
}
console.log(a);
si(10,20,2);


#Callback Function

1. A Callback is a Function which passed as an argument to another argument.

function greet(name,Callback)
{
    console.log('hi + ' ' + name);
    callback();
}
function callMe()
{
    console.log('i am a callback function');
}
greet('ram', callMe)

#Array Callback Functions
find() ; returns a first value of element that passes a test.

var numbers = [1,3,4,9,8];

function isEven(element){
    return element%2 == 0;
}

evenNumber = numbers.find(isEven);
console.log(evenNumber);

findIndex():- returns first index of array element.

forEach():
map():
filter():
every():
sum():

the setTimeout() method calls a function after a number of miliseconds the setTimeout method execute a block of code
after a specified time the method execute a block of code after a specified time the method executes the code only once.

the setTimeout() is asynchronous function meaning that timer will not pause the execution of other function in function stack the commonly used syntax is:

syntax:- setTimeout(function,miliseconds);

Asynchronous code
means the code is run after some time of execute differently parallely
Syntax:
 setTimeout(function(),3000)


clg
clg(function(){clg("this will execute after 3 seconds");},3000);
clg
clg

function hello(){
var x = 10; //Function Scope
let y = 10; //Block Scope
clg("X: " , x , "Y:" , y)
{
    var x = 45;
    let y = 45;
    clg(x,y)
}
clg(x,y)
}

#Rest Operator

 function hello(...num)
 {
    console.log(num);
 }
 hello(23,45)
 hello(23,45,56,78,90)
 hello()
 hello(33,66,99,111,777)


 function hello(x, ...num)
 {
    console.log(x);
    console.log(num);
 }
 hello(23,45)
 hello(23,45,56,78,90)
 hello()
 hello(33,66,99,111,777)

 var arr = [45,65,76,55,44,33,32,22]
 var[x,y,z,...data] = arr
 console.log(x,y,z)
 console.log(data)

 Swapping without using third variable
 var x = 45
 var y = 67
 console.log(x,y)
 var[y,x] = [x,y]
 console.log(x,y)

 #Spread Operator

 

var ob = {
    roll:101 , name:'Vikas', age:21
}

 var keys = Object.keys(ob)
 console.log(keys)

 var values = Object.values(ob)
 console.log(values)


 A clousure may be described as a combination of a function and the lexical environment in which it was declared.
 The lexical environment consists of any local variables in the function's scope when the function is created.
 A clousure enables one to refer to all local variables of a function in the state they were found.
 This is essntially achieved by defining a function inside another function.

 function closure(){
    function first(){
        clg('I was declared first')
    }
    function second(){
        clg('I was declared second')
    }
    function third(){
        clg('I was declared third')
    }
    return[first,second,third]
 }
 let f = closure()
 let one = f[0];
 let second = f[1];
 let third = f[2];
 one();
 second();
 third();

 In js a generator provide a new way to work with function and iterartor.
 we can stop the execution of a function from anywhere inside a function & and continue execution code for a halted position.

 function * generator(){
    .......
    .......
 }
 const a = generator()
 function *test(){
    clg("Code before first yield")
    yield = 100;
    clg(code before the second yield)
    yield = 200;
 }
 const g = test()
 clg(g.next());


#
call() v apply()

the call() method takes argument seperately, this method is very handy if you want to use an array instead of argument list.
the apply() method takes arguments as an array.

const person = {fname : "John" , lname: "Doe" , age:25};
for(let x in person){
    document.write(x + " " + person[x] + "<br>");
}